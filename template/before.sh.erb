# Export the module function if it exists
[[ $(type -t module) == "function" ]] && export -f module

# Find available port to run server on
port=$(find_port ${host})

# Generate SHA1 encrypted password (requires OpenSSL installed)
SALT="$(create_passwd 16)"
password="$(create_passwd 16)"
PASSWORD_SHA1="$(echo -n "${password}${SALT}" | openssl dgst -sha1 | awk '{print $NF}')"

# Notebook root directory
export NOTEBOOK_ROOT="${NOTEBOOK_ROOT:-${HOME}}"

# The `$CONFIG_FILE` environment variable is exported as it is used in the main
# `script.sh.erb` file when launching the Jupyter server.
export CONFIG_FILE="${PWD}/config.py"

# Generate Jupyter configuration file with secure file permissions
(
umask 077
cat > "${CONFIG_FILE}" << EOL
c.JupyterApp.config_file_name = 'ondemand_config'
c.KernelSpecManager.ensure_native_kernel = False
c.NotebookApp.ip = '*'
c.NotebookApp.port = ${port}
c.NotebookApp.port_retries = 0
c.NotebookApp.password = u'sha1:${SALT}:${PASSWORD_SHA1}'
c.NotebookApp.base_url = '/node/${host}/${port}/'
c.NotebookApp.open_browser = False
c.NotebookApp.allow_origin = '*'
c.NotebookApp.notebook_dir = '${NOTEBOOK_ROOT}'
c.NotebookApp.disable_check_xsrf = True
EOL
)

# Safari users hit this error https://github.com/jupyterlab/jupyterlab/issues/5486
# so let's make a new workspace dir that's this job's PWD and copy the defult /lab
# workspace over there so folks can update it.
WORKSPACE_DIR="$HOME/.jupyter/lab/workspaces"
FILES=$(ls $WORKSPACE_DIR)

for FILE in ${FILES[@]}
do
  ID=$(jq -r '.metadata.id' $WORKSPACE_DIR/$FILE)

  if [[ $ID == "/lab" ]]; then
    WORKSPACE_FILE="$WORKSPACE_DIR/$FILE"
    break
  fi
done

if [[ ${WORKSPACE_FILE+x} ]]; then
  cp $WORKSPACE_FILE .
fi

JUPYTER_API="<%= context.jupyterlab_switch == "1" ? "lab" : "tree" %>"

<%- if context.classroom == "1" -%>
module purge
module load <%= context.version %>

if [[ -n "${OSC_CLASS_FILES+x}" ]]; then
  # Copy over classroom materials
  set -x
  rsync -avz "$OSC_CLASS_FILES" "$HOME/osc_classes/$OSC_CLASS_ID"
  { set +x; } 2>/dev/null

  if [[ -n "${OSC_CLASS_FILE+x}" ]]; then
    LAST_FOLDER=$(echo "$OSC_CLASS_FILES" | awk -F"/" '{print $NF}')
    JUPYTER_API="notebooks/osc_classes/$OSC_CLASS_ID/$LAST_FOLDER/$OSC_CLASS_FILE"
  fi
fi

module purge
<%- end -%>

export JUPYTERLAB_WORKSPACES_DIR=$PWD
export jupyter_api="$JUPYTER_API"
